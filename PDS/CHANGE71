//SOMITCWC JOB (xxxxxxxx,xxxx,1439,9999,9999),CHANGE71-SOMITCW,
//             CLASS=x,MSGCLASS=x,
//             COND=(0,NE),NOTIFY=SOMITCW
//CHANGE71 EXEC ASMFCL,PARM.ASM=(RENT,NODECK,OBJECT,TERM),
//             PARM.LKED=RENT
PASS     TITLE 'CHANGE71 - - - Copy/Edit data with substitution'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program copies a file and substitutes data as specified in
*     the PARM.
*
*     The PARM format is *old-data1*new-data1*old-data2*new-data2*
*
*     Delimiters other than '*' may instead be used.
*
*     Up to 25 old-data new-data pairs may be used.
*
*  For problems or questions, contact: somitcw@yahoo.com
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE ,
         PRINT NOGEN
CHANGE71 CSECT ,
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'CHANGE71.&SYSDATE..&SYSTIME'  Save reg.s
         LR    R12,R15            Load the program's base register
         USING CHANGE71,R12       Give the assembler the new base
         LR    R2,R1              Save the PARM address
         GETMAIN R,LV=WORKSIZE    Get storage for work area
         DROP  R15                Drop the temporary base register
         XC    0(12,R1),0(R1)     Clear the new register savearea
         ST    R1,8(,R13)         Chain old and new save areas
         ST    R13,4(,R1)         Chain old and new save areas
         LR    R13,R1             Chain old and new save areas
         USING WORKAREA,R13       Tell assembler work area address
         XC    RETCODE,RETCODE    Initialize return code
         ICM   R2,B'1111',0(R2)   Load the address of the PARM
         BZ    NOPARM1            No PARM, go abend
         LH    R4,0(,R2)          Load the length of the PARM
         LTR   R4,R4              Set a condition code
         BZ    NOPARM2            No PARM, go abend
         CH    R4,H5              See if at least 5 bytes
         BL    TOOSHORT           PARM too short, go abend
         MVC   DELIMIT,2(R2)      Save the delimiter
         LA    R5,3(,R2)          Load the address of the PARM
         LA    R6,1(R4,R2)        Find the end of the PARM
         CLC   DELIMIT,0(R6)      See if PARM ends with a delimiter
         BNE   BADPARM1           Bad PARM, go abend
         LA    R7,PARMADRS        Load address of the PARM addr. table
         USING PARMS,R7           Point assembler to the PARM table
LOOP     DS    0H
         STCM  R5,B'1111',LOC     Save old-data PARM location
         CLC   DELIMIT,0(R5)      See if PARM has null field
         BE    BADPARM2           Bad PARM, go abend
         SLR   R8,R8              Clear a counter register
LOOP2    DS    0H
         CLC   DELIMIT,0(R5)      See if a new delimiter
         BE    NEWDELIM           Delimiter found, go process
         LA    R8,1(,R8)          Bump counter by one
         LA    R5,1(,R5)          Bump address by one
         CR    R5,R6              See if off the end of the PARM
         BH    BADLOGIC           Off the end of the PARM, go abend
         B     LOOP2              Keep looking for a new delimiter
NEWDELIM DS    0H
         BCTR  R8,0               Drop length by one for 'EX' inst.s
         STH   R8,LEN             Save the length of the PARM found
         LA    R7,HALFENTR(,R7)   Bump to new PARM address entry
         LA    R5,1(,R5)          Point past the delimiter found
         CR    R5,R6              See if off the end of the PARM
         BL    LOOP               Not end, go do the next PARM field
* End of PARM found,  build translate table
         XC    0(HALFENTR,R7),0(R7) Mark end of the PARM address list
         XC    TABLE,TABLE        Initialize the translate table
         LA    R7,PARMADRS        Re-load addr. of the PARM addr. table
LOOP3    DS    0H              Build translate table
         ICM   R8,B'1111',LOC     Load the first location
         BZ    ENDPARM            If none, go to edit data
         OC    LOC2,LOC2          Insure PARMs are paired
         BZ    BADPAIRS           PARMs are not paired, go abend
         SLR   R9,R9              Clear a work register
         IC    R9,0(,R8)          Get first character
         STC   R9,TABLE(R9)       Put the first character in the table
         LA    R7,FULLENTR(,R7)   Bump to the next entry
         B     LOOP3              Go process the next PARM pair
ENDPARM  DS    0H
         MVC   SYSUT1(UT1SIZE),DUMUT1  Create DCB for SYSUT1
         MVC   SYSUT2(UT2SIZE),DUMUT2  Create DCB for SYSUT2
         MVC   SYSPRINT(DUMPRTSZ),DUMPRINT  Create DCB for SYSPRINT
         LA    R0,SYSUT1          Load address of SYSUT1 DCB
*        OPEN  ((0)),MF=(E,OCPLIST)  Open the input file
         ST    R0,OCPLIST         Store SYSUT1 DCB address for OPEN
         MVI   OCPLIST,X'80'      Set options to no option ( input )
         LA    R1,OCPLIST         Load address of OPEN/CLOSE parm list
         SVC   19                 Open the input SYSUT1 file
         LA    R0,SYSUT2          Load address of SYSUT2 DCB
*        OPEN  ((0),OUTPUT),MF=(E,OCPLIST)  Open the OUTPUT file
         ST    R0,OCPLIST         Store SYSUT2 DCB address for OPEN
         MVI   OCPLIST,X'8F'      Set options to output
         LA    R1,OCPLIST         Load address of OPEN/CLOSE parm list
         SVC   19                 Open the output SYSUT2 file
         LA    R11,RECORD+71      Load address of end of record
         B     GET                Go read the first record
PUT      DS    0H
         CLC   RECORD+71(71),RECORD+72  See if 72-80 got overlayed
         MVC   RECORD+71(9),RECIN+71  Restore cols 72-80
         BNE   COL72ERR           Overlay column 72-80, go print error
PUT2     DS    0H
         PUT   SYSUT2,RECORD      Write a record
GET      DS    0H
         GET   SYSUT1,RECIN       Read a record from the input file
         MVC   RECORD(71),RECIN   Move record to work with
         MVI   RECORD+71,X'40'    Initialize past record area to spaces
         MVC   RECORD+72(L'RECORD-72),RECORD+71 Init past rec to spaces
         LA    R1,RECORD          Load address of the record
TRT      DS    0H
         CR    R1,R11             See if past end of record
         BH    PUT                Must be finished, go write record
         TRT   0(71,R1),TABLE     Find start of a change string
         BZ    PUT                If none found, go write record as is
         LA    R7,PARMADRS        Load address of the PARM addr. table
LOOP4    DS    0H
         LH    R2,LEN             Load length of PARM
         ICM   R3,B'1111',LOC     Load address of the PARM
         BZ    NOMATCH            No match, go check rest of record
         EX    R2,CLC             See if match is found
         BE    REPLACE            Is a match, go replace data
         LA    R7,FULLENTR(,R7)   Bump to next PARM pair
         B     LOOP4              Go check if a match
CLC      CLC   0(0,R1),0(R3)      See if data found
NOMATCH  DS    0H
         LA    R1,1(,R1)          Bump past that possible match
         B     TRT                Go find another possible match
REPLACE  DS    0H
         L     R3,LOC2            Load address of new data
         LH    R4,LEN2            Load length of new data
         LA    R5,1(R2,R1)        Find location after old data
         LA    R6,1(R4,R1)        Find location after new data
* R1=Address to change in record
* R2=Length of old-data
* R3=Address of the new data
* R4=Length of new-data
* R5=Location after old data
* R6=Location after new data
* R7=Parmadrs table location
         CR    R2,R4              Compare lengths of old and new data
         BE    EVEN               Length equal, do a direct replacement
         BL    OLDSHORT           Old data short, go expand record
         BH    OLDLONG            Old data long, go shrink record
EVEN     DS    0H
         EX    R4,MVC             Move the new data in
         LR    R1,R6              Bump past the area just changed
         B     TRT                Go find the next field to change
MVC      MVC   0(0,R1),0(R3)      Overlay the old data with the new
OLDSHORT DS    0H
         MVC   WORK,0(R5)         Expand the record
         MVC   0(71,R6),WORK      Expand the record
         B     EVEN               Now go process even fields
OLDLONG  DS    0H
         MVC   0(71,R6),0(R5)     Shrink the record
         B     EVEN               Now go process even fields
EOJ      DS    0H
         LA    R0,SYSUT2          Load address of SYSUT2 DCB
*        CLOSE ((0)),MF=(E,OCPLIST)  Close the output file
         ST    R0,OCPLIST         Store SYSUT2 DCB address for CLOSE
         MVI   OCPLIST,X'80'      Reset options & set end-of-list
         LA    R1,OCPLIST         Load address of OPEN/CLOSE parm list
         SVC   20                 Close the output SYSUT2 file
         LA    R0,SYSUT1          Load address of SYSUT1 DCB
*        CLOSE ((0)),MF=(E,OCPLIST)  Close the input file
         ST    R0,OCPLIST         Store SYSUT1 DCB address for CLOSE
         MVI   OCPLIST,X'80'      Reset options & set end-of-list
         LA    R1,OCPLIST         Load address of OPEN/CLOSE parm list
         SVC   20                 Close the output SYSUT1 file
         CLI   RETCODE+3,0        See if SYSPRINT was opened
         BE    EOJ2               Not opened, bypass CLOSE of SYSPRINT
         LA    R0,SYSPRINT        Load address of SYSPRINT DCB
*        CLOSE ((0)),MF=(E,OCPLIST)  Close the SYSPRINT file
         ST    R0,OCPLIST         Store SYSPRINT DCB address for CLOSE
         MVI   OCPLIST,X'80'      Reset options & set end-of-list
         LA    R1,OCPLIST         Load address of OPEN/CLOSE PARM list
         SVC   20                 Close the SYSPRINT output file
EOJ2     DS    0H
         L     R11,RETCODE        Load return code
         LR    R1,R13             Save workarea address for FREEMAIN
         L     R13,4(,R13)        Restore the caller's save area addr.
         FREEMAIN R,LV=WORKSIZE,A=(R1)  Free area pointed to by R1
         LR    R15,R11            Set return code
         RETURN (14,12),RC=(15)   Return to caller
         EJECT ,
COL72ERR DS    0H
         CLI   RETCODE+3,0        See if first error
         BNE   DETAIL             Not first, only detail lines needed
         MVI   RETCODE+3,8        Set return code of 8
         LA    R0,SYSPRINT        Load address of SYSPRINT DCB
*        OPEN  ((0),OUTPUT),MF=(E,OCPLIST)  Open SYSPRINT as output
         ST    R0,OCPLIST         Store SYSPRINT DCB address for OPEN
         MVI   OCPLIST,X'8F'      Set options to output
         LA    R1,OCPLIST         Load address of OPEN/CLOSE parm list
         SVC   19                 Open SYSPRINT as output
         MVC   EXTLST(EXTSIZE),DUMEXT  Initialize EXTRACT list
         LA    R0,TIOT            Load addr of addr of Task I/O Table
         EXTRACT (0),'S',FIELDS=TIOT,MF=(E,EXTLST) Get Task I/O Table
         L     R1,TIOT            Load address of Task I/O Table
         MVC   HEAD1,DUMHEAD1     Initialize report heading 1
         MVC   HEAD1+06(8),00(R1) Move JOBNAME  into print header
         MVC   HEAD1+20(8),08(R1) Move STEPNAME into print header
         MVC   HEAD1+38(8),16(R1) Move PROCSTEP into print header
         MVI   SPACES,C' '        Initialize spaces to spaces
         MVC   SPACES+1(L'SPACES-1),SPACES  Init spaces to spaces
         PUT   SYSPRINT,HEAD1     Write first heading record
         PUT   SYSPRINT,SPACES    Write a blank line
         PUT   SYSPRINT,HEAD2     Write second heading record
         PUT   SYSPRINT,SPACES    Write a blank line
         MVI   PRNTAREA,C' '      Set line to single space
DETAIL   DS    0H
         MVC   PRNTAREA+1(80),RECIN  Move input record for print
         PUT   SYSPRINT,PRNTAREA  Write output record
         MVC   PRNTAREA+1(80),RECORD  Move output record for print
         PUT   SYSPRINT,PRNTAREA  Write output record
         PUT   SYSPRINT,SPACES    Write a blank line
         B     PUT2               Return for additional processing
         SPACE ,
NOPARM1  DS    0H
         WTO   'CHANGE71 - NOPARM1 - PARM address is zero',ROUTCDE=11
         ABEND 1,DUMP             Abend with a dump
         SPACE ,
NOPARM2  DS    0H
         WTO   'CHANGE71 - NOPARM2 - PARM length is zero',ROUTCDE=11
         ABEND 2,DUMP             Abend with a dump
         SPACE ,
TOOSHORT DS    0H
         WTO   'CHANGE71 - TOOSHORT - PARM less than 5 bytes',         c
               ROUTCDE=11
         ABEND 3,DUMP             Abend with a dump
         SPACE ,
BADPARM1 DS    0H
       WTO 'CHANGE71 - BADPARM1 - PARM does not end with a delimiter', c
               ROUTCDE=11
         ABEND 4,DUMP             Abend with a dump
         SPACE ,
BADPARM2 DS    0H
         WTO   'CHANGE71 - BADPARM2 - Field in PARM has zero length',  c
               ROUTCDE=11
         ABEND 5,DUMP             Abend with a dump
         SPACE ,
BADLOGIC DS    0H
         WTO  'CHANGE71 - BADLOGIC - Process off the end of the PARM', c
               ROUTCDE=11
         ABEND 6,DUMP             Abend with a dump
         SPACE ,
BADPAIRS DS    0H
         WTO   'CHANGE71 - BADPAIRS - PARM has odd number of fields',  c
               ROUTCDE=11
         ABEND 7,DUMP             Abend with a dump
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Data Control Blocks
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
DUMUT1   DCB   DDNAME=SYSUT1,                                          C
               DSORG=PS,          Data set Org. Physical Sequencial    C
               EODAD=EOJ,         End of data address                  C
               LRECL=80,          Logical RECord Length                C
               MACRF=GM,          MACRO Ref. GET/move                  C
               RECFM=FB           Record Format Fixed Blocked
UT1SIZE  EQU   *-DUMUT1
         EJECT
DUMUT2   DCB   DDNAME=SYSUT2,                                          C
               DSORG=PS,                                               C
               LRECL=80,                                               C
               MACRF=PM,          MACRO Ref. PUT/move                  C
               RECFM=FB
UT2SIZE  EQU   *-DUMUT2
         EJECT
DUMPRINT DCB   DDNAME=SYSPRINT,                                        C
               DSORG=PS,                                               C
               LRECL=81,                                               C
               MACRF=PM,                                               C
               RECFM=FBA          Record Format Fix Block ASA Cont.Char
DUMPRTSZ EQU   *-DUMPRINT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Work Area and Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
H5       DC    H'5'               Constant for compare of PARM length
         SPACE 3
DUMEXT   EXTRACT *-*,'S',FIELDS=TIOT,MF=L  Dummy EXTRACT parm list
EXTSIZE  EQU   *-DUMEXT
         SPACE 3
DUMHEAD1 DC    CL81'1 JOB-jjjjjjjj STEP-ssssssss PROCSTEP-pppppppp had c
               an overlay in cols. 72-80'
HEAD2    DC    CL81'  Before and after images follow:'
         SPACE 3
         LTORG ,                  Just in case someone codes sloppy
         EJECT ,
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DSECTs
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
PARMS    DSECT ,                  PARM table DSECT
LEN      DS    XL2                Length of PARM data item
LOC      DS    XL4                Address of PARM data item
HALFENTR EQU   *-PARMS            Length of half PARM table entry
LEN2     DS    XL2                Length of PARM data item
LOC2     DS    XL4                Address of PARM data item
FULLENTR EQU   *-PARMS            Length of PARM address table entry
         SPACE 2
WORKAREA DSECT ,                  Program workarea DSECT
SAVEAREA DS    18F                Register save area
         SPACE 3
TIOT     DS    F                  Task I/O Table address
         SPACE 3
RETCODE  DS    F                  Return code
         SPACE 3
OCPLIST  DS    F                  OPEN/CLOSE parameter list
         SPACE 3
EXTLST   DS    XL(EXTSIZE)        EXTRACT parameter list
         SPACE 3
WORK     DS    XL80               Record work area
         SPACE 3
RECORD   DS    XL256              Record I/O area
         SPACE 3
TABLE    DS    XL256              Translate table
         SPACE 3
RECIN    DS    XL80               Record input area
         SPACE 3
DELIMIT  DS    CL1                Input delimiter
         SPACE 3
SPACES   DS    CL81               Constant of spaces for compare
         SPACE 3
HEAD1    DS    CL81               Error report heading 1
         SPACE 3
PRNTAREA DS    CL81               Print area
         SPACE 3
         DS    0H                 Force half word alignment
PARMADRS DS    51XL(HALFENTR)     PARM table
         DS    0D                 Force double word alignment
SYSUT1   DS    XL(UT1SIZE)        DCB for SYSUT1
         SPACE 3
SYSUT2   DS    XL(UT2SIZE)        DCB for SYSUT2
         SPACE 3
SYSPRINT DS    XL(DUMPRTSZ)       DCB for SYSPRINT
         SPACE 3
WORKSIZE EQU   *-WORKAREA         Length of workarea DSECT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Register Equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE 2
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         SPACE 2
         END   ,                  The end of the program
//LKED.SYSLMOD  DD  DSN=xxxx.xxxxLIB,DISP=SHR,SPACE=
 NAME CHANGE71
